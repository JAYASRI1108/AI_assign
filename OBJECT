import numpy as np
import cv2
import time

# Paths to the model files
prototxt_path = "MobileNetSSD_deploy.prototxt.txt"
model_path = "MobileNetSSD_deploy.caffemodel"
conf_thresh = 0.2

# List of classes that MobileNet SSD can detect
classes = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
           "dog", "horse", "motorbike", "person", "pottedplant", "sheep",
           "sofa", "train", "tvmonitor"]

# Generate random colors for bounding boxes for each class
colors = np.random.uniform(0, 255, size=(len(classes), 3))

print("Loading model...")
net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)
print("Model loaded.")

print("Starting camera feed...")
vs = cv2.VideoCapture(0)  # Initialize the camera capture
time.sleep(2.0)  # Wait for 2 seconds to let the camera warm-up

try:
    while True:
        ret, frame = vs.read()
        if not ret:
            print("Failed to grab frame")
            break

        frame = cv2.resize(frame, (500, 500))

        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 0.007843, (300, 300), 127.5)

        net.setInput(blob)
        detections = net.forward()

        for i in range(0, detections.shape[2]):
            confidence = detections[0, 0, i, 2]

            if confidence > conf_thresh:
                idx = int(detections[0, 0, i, 1])
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")

                label = "{}: {:.2f}%".format(classes[idx], confidence * 100)
                cv2.rectangle(frame, (startX, startY), (endX, endY), colors[idx], 2)
                y = startY - 15 if startY - 15 > 15 else startY + 15
                cv2.putText(frame, label, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, colors[idx], 2)

        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == 27:  # ESC key
            break
finally:
    vs.release()
    cv2.destroyAllWindows()
